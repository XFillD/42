C++ - Mo dule 05
Rep etition and Exceptions
Summary:
This document contains the exercises of Module 05 from the C++ modules.
Version: 10.3


Contents
I Intro duction
 2
I I General rules
 3
I I I Exercise 00: Mommy, when I grow up, I want to b e a bureaucrat!
 6
IV Exercise 01: Form up, maggots!
 8
V Exercise 02: No, you need form 28B, not 28C...
 10
VI Exercise 03: At least this b eats coÀôee-mak ing
 12
VI I Submission and Peer Evaluation
 14
1


Chapter I
Intro duction
C++ is a general-purpose programming language created by Bjarne Stroustrup as an ex-
tension of the C programming language, or "C with Classes" (source:
 Wikipedia
).
The goal of these mo dules is to intro duce you to
Ob ject-Oriented Programming
.
This will b e the starting p oint of your C++ journey. Many languages are recommended
for learning OOP. We have chosen C++ since it is derived from your old friend, C.
Because this is a complex language, and in order to keep things simple, your co de will
comply with the C++98 standard.
We are aware that mo dern C++ is signiÀùcantly diÀôerent in many asp ects. So, if you
want to b ecome a proÀùcient C++ develop er, it is up to you to go further after the 42
Common Core!
2


Chapter I I
General rules
Compiling

Compile your co de with
c++
and the Àõags
-Wall -Wextra -Werror

Your co de should still compile if you add the Àõag
-std=c++98
Formatting and naming conventions

The exercise directories will b e named this way:
ex00, ex01, ... , exn

Name your Àùles, classes, functions, memb er functions and attributes as required in
the guidelines.

Write class names in
Upp erCamelCase
format. Files containing clas s co de will
always b e named according to the class name. For instance:
ClassName.hpp
/
ClassName.h
,
ClassName.cpp
, or
ClassName.tpp
. Then, if you
have a header Àùle containing the deÀùnition of a class "BrickWall" standing for a
brick wall, its name will b e
BrickWall.hpp
.

Unless sp eciÀùed otherwise, every output message must end with a newline character
and b e displayed to the s tandard output.

Goodbye Norminette!
No co ding style is enforced in the C++ mo dules. You can
follow your favorite one. But keep in mind that co de your p eer evaluators can't
understand is co de they can't grade. Do your b est to write clean and readable co de.
Allowe d/Forbidden
You are not co ding in C anymore. Time to C++! Therefore:

You are allowed to use almost everything from the standard library. Thus, instead
of sticking to what you already know, it would b e smart to use the C++-ish versions
of the C functions you are used to as much as p ossible.

However, you can't use any other external library. It means C++11 (and derived
forms) and
Boost
libraries are forbidden. The following functions are forbidden
to o:
*printf()
,
*alloc()
and
free()
. If you use them, your grade will b e 0 and
that's it.
3


C++ - Mo dule 05 Rep etition and Exceptions

Note that unless explicitly stated otherwise, the
using namespace <ns_name>
and
friend
keywords are forbidden. Otherwise, your grade will b e -42.

You are allowed to use the STL only in Mo dules 08 and 09.
That means :
no
Containers
(vector/list/map, and so forth) and no
Algorithms
(anything that
requires including the
<algorithm>
header) until then. Otherwise, your grade will
b e -42.
A few design requirements

Memory leakage o ccurs in C++ to o. When you allo cate memory (by using the
new
keyword), you must avoid
memory leaks
.

From Mo dule 02 to Mo dule 09, your classes must b e designed in the
Ortho dox
Canonical Form, except when explicitly stated otherwis e
.

Any function implementation put in a header Àùle (except for function templates)
means 0 to the exercise.

You should b e able to use each of your headers indep endently from others. Thus,
they must include all the dep endencies they need. However, you must avoid the
problem of double inclusion by adding
include guards
. Otherwise, your grade will
b e 0.
Read me

You can add some additional Àùles if you need to (i.e., to split your co de). As these
assignments are not veriÀùed by a program, feel free to do so as long as you turn in
the mandatory Àùles.

Sometimes, the guidelines of an exercise lo ok short but the examples can show
requirements that are not explicitly written in the instructions.

Read each mo dule completely b efore starting! Really, do it.

By Odin, by Thor! Use your brain!!!
Regarding the Makefile for C++ projects, the same rules as in C apply
(see the Norm chapter about the Makefile).
You will have to implement a lot of classes. This can seem tedious,
unless you're able to script your favorite text editor.
4


C++ - Mo dule 05 Rep etition and Exceptions
You are given a certain amount of freedom to complete the exercises.
However, follow the mandatory rules and don't be lazy. You would
miss a lot of useful information! Do not hesitate to read about
theoretical concepts.
5


Chapter I I I
Exercise 00: Mommy, when I grow
up, I want to b e a bureaucrat!
Exercise : 00
Mommy, when I grow up , I want to b e a bureaucrat!
Turn-in directory :
ex
00
=
Files to turn in :
Makefile, main.cpp, Bureaucrat.{h, hpp}, Bureaucrat.cpp
Forbidden functions :
None
Please note that exception classes do not have to be designed in
Orthodox Canonical Form. However, every other class must follow it.
Let's design an artiÀùcial nightmare of oÀöces, corridors, forms, and waiting queues.
Sounds fun? No? To o bad.
First, start with the smallest cog in this vast bureaucratic machine: the
Bureaucrat
.
A
Bureaucrat
must have:

A constant name.

A grade that ranges from
1
(highest p ossible grade) to
150
(lowest p ossible grade).
Any attempt to instantiate a Bureaucrat with an invalid grade must throw an excep-
tion:
either a
Bureaucrat::GradeTooHighException
or a
Bureaucrat::GradeTooLowException
.
6


C++ - Mo dule 05 Rep etition and Exceptions
You will provide getters for b oth attributes:
getName()
and
getGrade()
. You must
also implement two memb er functions to increment or decrement the bureaucrat's grade.
If the grade go es out of range, b oth functions must throw the same exceptions as the
constructor.
Remember, since grade 1 is the highest and 150 the lowest,
incrementing a grade 3 should result in a grade 2 for the bureaucrat.
The thrown exceptions must b e catchable using try and catch blo cks:
try
{
/* do some stuff with bureaucrats */
}
catch
(
std
::
exception
 &
 e
)
{
/* handle exception */
}
You must implement an overload of the insertion () op erator to print output in the
following format (without the angle brackets):
<name>, bureaucrat grade <grade>
.
As usual, submit some tests to prove that everything works as exp ected.
7


Chapter IV
Exercise 01: Form up, maggots!
Exercise : 01
Form up, maggots!
Turn-in directory :
ex
01
=
Files to turn in :
Files from the previous exercise + Form.{h, hpp}, Form.cpp
Forbidden functions :
None
Now that you have bureaucrats, let's give them something to do. What b etter activity
could there b e than Àùlling out a stack of forms?
Let's create a
Form
class. It has:

A constant name.

A b o olean indicating whether it is signed (at construction, it is not).

A constant grade required to sign it.

A constant grade required to execute it.
All these attributes are
private
, not protected.
The grades of the
Form
follow the same rules as those of the Bureaucrat. Thus, the
following exceptions will b e thrown if a form's grade is out of b ounds:
Form::GradeTooHighException
and
Form::GradeTooLowException
.
As b efore, write getters for all attributes and overload the insertion () op erator to
print all the form's information.
8


C++ - Mo dule 05 Rep etition and Exceptions
Also, add a
beSigned()
memb er function to the Form that takes a Bureaucrat as a
parameter. It changes the form's status to signed if the bureaucrat's grade is high enough
(greater than or equal to the required one). Rememb er, grade 1 is higher than grade 2.
If the grade is to o low, throw a
Form::GradeTooLowException
.
Then, mo dify the
signForm()
memb er function in the Bureaucrat class. This func-
tion must call
Form::beSigned()
to attempt to sign the form. If the form is signed
successfully, it will print something like:
<bureaucrat> signed <form>
Otherwise, it will print something like:
<bureaucrat> couldn't sign <form> because <reason>
.
Implement and s ubmit some tests to ensure everything works as exp ected.
9


Chapter V
Exercise 02: No, you need form 28B,
not 28C...
Exercise : 02
No, you need form 28B, not 28C...
Turn-in directory :
ex
02
=
Files to turn in :
Makefile, main.cpp, Bureaucrat.[{h, hpp},cpp], +
AForm.[{h, hpp},cpp], ShrubberyCreationForm.[{h, hpp},cpp], +
RobotomyRequestForm.[{h, hpp},cpp], PresidentialPardonForm.[{h, hpp},cpp]
Forbidden functions :
None
Now that you have basic forms, it's time to create a few more that actually do some-
thing.
In all cases, the base class Form must b e an abstract class and should therefore b e
renamed AForm. Keep in mind that the form's attributes need to remain private and
that they b elong to the base class.
Add the following concrete classes:

Shrubb eryCreationForm
: Required grades: sign 145, exec 137
Creates a Àùle
<target>_shrubbery
in the working directory and writes ASCI I trees
inside it.

Rob otomyRequestForm
: Required grades: sign 72, exec 45
Makes some drilling noises, then informs that
<target>
has b een rob otomized
successfully 50% of the time. Otherwise, it informs that the rob otomy failed.

PresidentialPardonForm
: Required grades: s ign 25, exec 5
Informs that
<target>
has b een pardoned by Zapho d Beeblebrox.
All of them take only one parameter in their constructor: the target of the form. For
example, "home" if you want to plant shrubb ery at home.
10


C++ - Mo dule 05 Rep etition and Exceptions
Now, add the
execute(Bureaucrat const & executor) const
memb er function to
the base form and implement a function to execute the form's action in the concrete
classes. You must check that the form is s igned and that the grade of the bureaucrat at-
tempting to execute the form is high enough. Otherwise, throw an appropriate exception.
Whether you check the requirements in every concrete class or in the base class (and
then call another function to execute the form) is up to you. However, one way is more
elegant than the other.
Lastly, add the
executeForm(AForm const & form) const
memb er function to the
Bureaucrat class. It must attempt to execute the form. If successful, print something like:
<bureaucrat> executed <form>
If not, print an explicit error message.
Implement and s ubmit some tests to ensure everything works as exp ected.
11


Chapter VI
Exercise 03: At least this b eats
coÀôee-making
Exercise : 03
At leas t this b eats coÀôee-making
Turn-in directory :
ex
03
=
Files to turn in :
Files from previous exercises + Intern.{h, hpp}, Intern.cpp
Forbidden functions :
None
Since Àùlling out forms all day would b e to o cruel for our bureaucrats, interns exist to
take on this tedious task. In this exercise, you must implement the
Intern
class. The
intern has no name, no grade, and no unique characteristics. The only thing bureaucrats
care ab out is that they do their job.
However, the intern has one key ability: the
makeForm()
function. This function
takes two s trings as parameters: the Àùrst one represents the name of a form, and the
second one represents the target of the form. It returns a p ointer to a
AForm
ob ject
(corresp onding to the form name passed as a parameter), with its target initialized to
the second parameter.
It should print something like:
Intern creates <form>
If the provided form name do es not exist, print an explicit error message.
12


C++ - Mo dule 05 Rep etition and Exceptions
You must avoid unreadable and messy solutions, such as using an excessive if/el-
seif/else structure. This kind of approach will not b e accepted during the evaluation
pro cess. You're not in the Piscine (p o ol) anymore. As usual, you must test everything
to ensure it works as exp ected.
For example, the following co de creates a
Rob otomyRequestForm
targeted at
"Bender":
{
Intern
 someRandomIntern
;
AForm
*
 rrf
;
rrf
 =
 someRandomIntern
.
makeForm
(
"robotomy request"
,
 "Bender"
);
}
13


Chapter VI I
Submission and Peer Evaluation
Submit your assignment to your
Git
rep ository as usual. Only the work inside your
rep ository will b e evaluated during the defense. Make sure to double-check the names of
your folders and Àùles to ensure they are correct.
16D85ACC441674FBA2DF65190663F9373230CEAB1E4A0818611C0E39F5B26E4D774F1
74620A16827E1B16612137E59ECD492E468A92DCB17BF16988114B98587594D12810
E67D173222A
14
